// <auto-generated />
using API.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Assunto", b =>
                {
                    b.Property<int>("CodAs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodAs");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodAs"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Descricao");

                    b.HasKey("CodAs");

                    b.ToTable("Assuntos", (string)null);
                });

            modelBuilder.Entity("API.Models.Autor", b =>
                {
                    b.Property<int>("CodAu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodAu");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodAu"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Nome");

                    b.HasKey("CodAu");

                    b.ToTable("Autores", (string)null);
                });

            modelBuilder.Entity("API.Models.FormaCompra", b =>
                {
                    b.Property<int>("CodForComp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodForComp");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodForComp"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Descricao");

                    b.HasKey("CodForComp");

                    b.ToTable("FormasCompra", (string)null);
                });

            modelBuilder.Entity("API.Models.Livro", b =>
                {
                    b.Property<int>("CodL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodL");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodL"));

                    b.Property<string>("AnoPublicacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AssuntoId")
                        .HasColumnType("integer");

                    b.Property<int>("Edicao")
                        .HasColumnType("integer");

                    b.Property<string>("Editora")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FormaCompraId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("Titulo");

                    b.HasKey("CodL");

                    b.HasIndex("AssuntoId");

                    b.HasIndex("FormaCompraId");

                    b.ToTable("Livros", (string)null);
                });

            modelBuilder.Entity("API.Models.LivroAutor", b =>
                {
                    b.Property<int>("CodL")
                        .HasColumnType("integer");

                    b.Property<int>("CodAu")
                        .HasColumnType("integer");

                    b.HasKey("CodL", "CodAu");

                    b.HasIndex("CodAu");

                    b.ToTable("LivrosAutores", (string)null);
                });

            modelBuilder.Entity("API.Models.RelatorioView", b =>
                {
                    b.Property<string>("Assunto_Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Assunto_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Autor_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Autor_Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Livro_Assunto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Livro_Id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Livro_Preco")
                        .HasColumnType("numeric");

                    b.Property<string>("Livro_Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("vw_livros_autores", (string)null);
                });

            modelBuilder.Entity("API.Models.Livro", b =>
                {
                    b.HasOne("API.Models.Assunto", "Assunto")
                        .WithMany("Livros")
                        .HasForeignKey("AssuntoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.FormaCompra", "FormaCompra")
                        .WithMany()
                        .HasForeignKey("FormaCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assunto");

                    b.Navigation("FormaCompra");
                });

            modelBuilder.Entity("API.Models.LivroAutor", b =>
                {
                    b.HasOne("API.Models.Autor", "Autor")
                        .WithMany("LivrosAutores")
                        .HasForeignKey("CodAu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Livro", "Livro")
                        .WithMany("LivrosAutores")
                        .HasForeignKey("CodL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("API.Models.Assunto", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("API.Models.Autor", b =>
                {
                    b.Navigation("LivrosAutores");
                });

            modelBuilder.Entity("API.Models.Livro", b =>
                {
                    b.Navigation("LivrosAutores");
                });
#pragma warning restore 612, 618
        }
    }
}
